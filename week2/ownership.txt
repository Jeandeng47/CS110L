Example 1:
```
fn main() {
    let mut s = String::from("hello");
    let ref1 = &s;
    let ref2 = &ref1;
    let ref3 = &ref2;
    s = String::from("goodbye");
    println!("{}", ref3.to_uppercase());
}
```

Error: Cannot create mutable reference while immutable references are still active
Fix: Use scope to limit borrow life time
```
fn main {
    let mut s = String::from("hello");

    {
        let ref1 = &s;
        let ref2 = &ref1;
        let ref3 = &ref2;
        println!("{}", ref3.to_uppercase());
    } // All immutable references go out of scope here

    s = String::from("goodbye"); // Mutable borrow is now allowed
    println!("{}", s);
}
```



Example 2:
```
fn drip_drop() -> &String {
    let s = String::from("hello world!");
    return &s;
}
```

Error: Return a local varibale in a function
Fix: Return a string

```
fn drip_drop() -> String {
    let s = String::from("hello world!");
    return s;
}

fn main() {
    let result = drip_drop();
    println!("{}", result);
}

```



Example 3:
```
fn main() {
    let s1 = String::from("hello");
    let mut v = Vec::new();
    v.push(s1);
    let s2: String = v[0];
    println!("{}", s2);
}
```
Error: Move ownership inside vector and try to move it out in invalid way
Fix: Use reference instead of ownership

```
fn main() {
    let s1 = String::from("hello");
    let mut v = Vec::new();
    v.push(s1);
    let s2: &String = &v[0];
    println!("{}", s2);
}
```